using System;
using System.Collections.Generic;
using Iota.Lib.CSharp.Api;
using Iota.Lib.CSharp.Api.Core;
using Iota.Lib.CSharp.Api.Exception;
using Iota.Lib.CSharp.Api.Model;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace Iota.Lib.CSharpTests.Api
{
    [TestClass]
    public class IotaApiTests
    {
        private static string TEST_SEED1 =
            "AAA999999999999999999999999999999999999999999999999999999999999999999999999999999";

        private static string TEST_SEED2 =
            "IHDEENZYITYVYSPKAURUZAQKGVJEREFDJMYTANNXXGPZ9GJWTEOJJ9IPMXOGZNQLSNMFDSQOTZAEETUEA";

        private static string TEST_ADDRESS_WITHOUT_CHECKSUM =
            "PNGMCSNRCTRHCHPXYTPKEJYPCOWKOMRXZFHH9N9VDIKMNVAZCMIYRHVJIAZARZTUETJVFDMBEBIQE9QTH";

        private static string TEST_ADDRESS_WITH_CHECKSUM =
            "PNGMCSNRCTRHCHPXYTPKEJYPCOWKOMRXZFHH9N9VDIKMNVAZCMIYRHVJIAZARZTUETJVFDMBEBIQE9QTHBFWDAOEFA";

        private static string TEST_HASH =
            "CKZ9TYPLUWH9FUSYJMPIZBVHWFZXTZMVOJLC9KOICSTBBQWXYTOTMCVPSPMYNDONTXHRULRFAWD999999";

        private static string TEST_TRYTES =


        private static string TEST_MESSAGE = "COTA";
        private static string TEST_TAG = "COTASPAM9999999999999999999";

        private static string[] TEST_ADDRESSES =
        {
            "KHJXD9XKXPIVQRGREUIPVJTMEY9L9MXZAAKBBRYNINTIOXWBRMNLLW9MLGAXMGQWDBZLCOGFCBNKTDLDC"
            , "MQSAAEDPMKIAJPPGNLIHPQIVFGLHNEGG9JNMSHOQSVQHBQBMLNHY9WVRTCOYUOWOIJHBQXIQVFPDF9YRW"
            , "RGYOHMECRNVPYYPIAKEWHSOLBYOQPRFRPOJGHUMEGLICCUIPTZEXLWDLLPBNRXONUTQGLSAJSLHRXFVQD"
            , "FOJHXRVJRFMJTFDUWJYYZXCZIJXKQALLXMLKHZFDMHWTIBBXUKSNSUYJLKYRQBNXKRSUXZHDTPWXYD9YF"
            , "B9YNPQO9EXID9RDEEGLCBJBYKBLWHTOQOZKTLJDFPJZOPKJJTNUYUVVTDJPBCBYIWGPSCMNRZFGFHFSXH"
            , "NQEFOAFIYKZOUXDFQ9X9PHCNSDETRTJZINZ9EYGKU99QJLDSTSC9VTBAA9FHLNLNYQXWLTNPRJDWCGIPP"
            , "CEGLBSXDJVXGKGOUHRGMAQDRVYXCQLXBKUDWKFFSIABCUYRATFPTEEDIFYGAASKFZYREHLBIXBTKP9KLC"
            , "QLOXU9GIQXPPE9UUT9DSIDSIESRIXMTGZJMKLSJTNBCRELAVLWVJLUOLKGFCWAEPEQWZWPBV9YZJJEHUS"
            , "XIRMYJSGQXMM9YPHJVVLAVGBBLEEMOOKHHBFWKEAXJFONZLNSLBCGPQEVDMMOGHFVRDSYTETIFOIVNCR9"
            , "PDVVBYBXMHZKADPAYOKQNDPHRSWTHAWQ9GRVIBOIMZQTYCWEPCDWDVRSOUNASVBDLBOAMVLYEVVCMAM9N"
            , "U9GAIAPUUQWJGISAZWPLHUELTZ9WSHWXS9JLPKOWHRRIVUKGWCTJMBULVMKTETTUNHZ9HWHBALUCJIROU"
            , "VFPMKZLLMDUOEKNBEKQZPTNZJZF9UHRWSTHXLWQQ9OAXTZQHTZPAWNJNXKAZFSDFWKFQEKZIGJTLWQFLO"
            , "IGHK9XIWOAYBZUEZHQLEXBPTXSWVANIOUZZCPNKUIJIJOJNAQCJWUJHYKCZOIKVAAHDGAWJZKLTPVQL9G"
            , "LXQPWMNXSUZTEYNC9ZBBFHY9YWCCOVKBNIIOUSVXZJZMJKJFDUWGUVXYCHGKUHEEIDHSGEWFAHVJPRIJT"
            , "AKFDX9PGGQLZUWRMZ9YBDF9CG9TWXCNALCSXSAWHFIMGXCSYCJLSWIQDGGVDRMNEKKECQEYAITGNLNJFQ"
            , "YX9QSPYMSFVOW9UVZRDVOCPYYMUTDHCCPKHMXQSJQJYIXVCHILKW9GBYJTYGLIKBTRQMDCYBMLLNGSSIK"
            , "DSYCJKNG9TAGJHSKZQ9XLKAKNSKJFZIPVEDGJFXRTFGENHZFQGXHWDBNXLLDABDMOYELPG9DIXSNJFWAR"
            , "9ANNACZYLDDPZILLQBQG9YMG9XJUMTAENDFQ9HMSSEFWYOAXPJTUXBFTSAXDJPAO9FKTWBBSCSFMOUR9I"
            , "WDTFFXHBHMFQQVXQLBFJFVVHVIIAVYM9PFAZCHMKET9ESMHIRHSMVDJBZTXPTAFVIASMSXRDCIYVWVQNO"
            , "XCCPS9GMTSUB9DXPVKLTBDHOFX9PJMBYZQYQEXMRQDPGQPLWRGZGXODYJKGVFOHHYUJRCSXAIDGYSAWRB"
            , "KVEBCGMEOPDPRCQBPIEMZTTXYBURGZVNH9PLHKPMM9D9FUKWIGLKZROGNSYIFHULLWQWXCNAW9HKKVIDC"
        };

        private static string testTrytesValid =


        private IotaApi iotaClient;

        [TestInitialize]
        public void createApiClientInstance()
        {
            iotaClient = new IotaApi("node.iotawallet.info", 14265);
        }
        
        [TestMethod]
        public void shouldGetInputs()
        {
            Inputs res = iotaClient.GetInputs(TEST_SEED1, 0, 0, 0);
            Console.WriteLine(res);
            Assert.IsNotNull(res);
            Assert.IsNotNull(res.TotalBalance);
            Assert.IsNotNull(res.InputsList);
        }

        [TestMethod]
        public void shouldCreateANewAddress()
        {
            string[] res = iotaClient.GetNewAddress(TEST_SEED1, 0, false, 5, false);
            Assert.AreEqual(res[0], TEST_ADDRESS_WITHOUT_CHECKSUM);
            Console.WriteLine(res);
        }

        [TestMethod]
        public void shouldPrepareTransfer()
        {
            List<Transfer> transfers = new List<Transfer>
            {
                new Transfer(TEST_ADDRESS_WITH_CHECKSUM, 0, TEST_MESSAGE, TEST_TAG),
                new Transfer(TEST_ADDRESS_WITH_CHECKSUM, 1, TEST_MESSAGE, TEST_TAG)
            };

            List<string> trytes = null;

            try
            {
                trytes = iotaClient.PrepareTransfers(TEST_SEED1, transfers.ToArray(), null, null);
            }
            catch (NotEnoughBalanceException ex)
            {
                Console.WriteLine(ex.ToString());
            }

            Assert.IsNotNull(trytes);
            Assert.IsFalse(trytes.Count == 0);
        }

        [TestMethod]
        public void shouldGetLastInclusionState()
        {
            GetInclusionStatesResponse res = iotaClient.GetLatestInclusion(new string[]
            {
                TEST_HASH
            });
            Assert.IsNotNull(res.States);
        }

        [TestMethod]
        public void shouldFindTransactionObjects()
        {
            List<Transaction> ftr = iotaClient.FindTransactionObjects(TEST_ADDRESSES);
            Assert.IsNotNull(ftr);
        }
        
        [TestMethod]
        [ExpectedException(typeof(InvisibleBundleTransactionException))]
        public void shouldGetBundleWithInvisibleBundleCauseAInvisibleBundleTransactionException()
        {
            Bundle gbr = iotaClient.GetBundle(TEST_HASH);
            Assert.IsNotNull(gbr);
        }

        [TestMethod]
        public void shouldGetTransfers()
        {
            Bundle[] gtr = iotaClient.GetTransfers(TEST_SEED1, 0, 0, false);
            
            foreach (Bundle b in gtr)
            {
                Assert.IsTrue(b.Transactions.TrueForAll(t => t != null));
            }
        }

        [TestMethod]
        [ExpectedException(typeof(ArgumentException))]
        public void shouldNotSendTrytes()
        {
            iotaClient.SendTrytes(new[] {TEST_TRYTES}, 9, 18);
        }

        [TestMethod]
        public void shouldSendTrytes()
        {
            
            iotaClient.SendTrytes(new[] { testTrytesValid }, 9, 18);
        }

        [TestMethod]
        public void shouldSendTransfer()
        {
            List<Transfer> transfers = new List<Transfer>
            {
                new Transfer(TEST_ADDRESS_WITHOUT_CHECKSUM, 0, "JUSTANOTHERTEST", TEST_TAG)
            };

            bool[] str = iotaClient.SendTransfer(TEST_SEED2, 9, 18, transfers.ToArray(), null, null);
            Assert.IsNotNull(str);
        }
    }
}